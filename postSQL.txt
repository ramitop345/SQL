-- Creating tables
CREATE TABLE student (
    -- student_id INT PRIMARY KEY,
    student_id INT PRIMARY KEY AUTO_INCREMENT, -- the value is automatically incremetned on every insert of items 
    -- or do it this way PRIMARY KEY(student_id), 
    name VARCHAR(20) NOT NULL,
    -- major VARCHAR(20) UNIQUE to only accept unique values for this item
    major VARCHAR(20) DEFAULT 'undecided'
);

-- used to show elements from table
DESCRIBE student;

-- used to delete tables
DROP TABLE student;

-- used to modify table content, add/REMOVE columns
ALTER TABLE student ADD gpa DECIMAL(3,2);
ALTER TABLE student DROP COLUMN gpa;


--show content
SELECT * FROM student;

--insert elements in Table
INSERT INTO student VALUES(1, 'Jack', 'Biology');
INSERT INTO student VALUES(2, 'Kate', 'Sociology');
INSERT INTO student(student_id, name) VALUES(3, 'Kate');
INSERT INTO student VALUES(4, 'Jack', 'Biology');
INSERT INTO student VALUES(5, 'Mike', 'Computer Science');
INSERT INTO student(name, major) VALUES('Loic', 'Maths');

-- UPDATATING TABLES
UPDATE student
SET major = 'BIO'
WHERE major = 'Biology'; -- we can update considerung more options(student_id, name, or major)

UPDATE student
SET name = 'unknown'
WHERE name = 'Jack' OR major = 'undecided'; -- CAN also use AND or XOR gatter

--deleting elements from Table
DELETE FROM student
WHERE student_id = 3;
-- these are other operators that can be used
-- <, > , <=, >=, =, <>, AND, OR


SELECT student.name, student.major
FROM student
-- ORDER BY name DESC;  -- DESC Means descending and ASC means Ascending
ORDER BY major, student_id DESC -- orders first by major und then by student_id if 2 elmenens with same major
LIMIT 2; -- to output only 2 items

SELECT *
FROM student
WHERE name IN ('Claire', 'Kate', 'Mike'); -- show elements that are conatined in this group




------------------------------company db-----------------------------------
CREATE TABLE employee (
    emp_id INT PRIMARY KEY,
    first_name VARCHAR(40),
    last_name VARCHAR(40),
    birth_day DATE,
    sex VARCHAR(1),
    salary INT,
    super_id INT,
    branch_id INT
);

DROP TABLE branch;
DROP TABLE employee;
DROP TABLE client;
DROP TABLE works_with;
DROP TABLE branch_supplier;

DESCRIBE TABLE branch_supplier;

CREATE TABLE branch(
    branch_id INT PRIMARY KEY,
    branch_name VARCHAR(30),
    mgr_id INT,
    mgr_start_date DATE,
    FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);

ALTER TABLE employee
ADD FOREIGN KEY(branch_id)
REFERENCES branch(branch_id)
ON DELETE SET NULL;

ALTER TABLE employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;

CREATE TABLE client (
    client_id INT PRIMARY KEY,
    client_name VARCHAR(40),
    branch_id INT,
    FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON  DELETE SET NULL
);

CREATE TABLE works_with(
    emp_id INT,
    client_id INT,
    total_sales INT,
    PRIMARY KEY(emp_id, client_id),
    FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON  DELETE CASCADE,
    FOREIGN KEY(client_id) REFERENCES client(client_id) ON  DELETE CASCADE
);

CREATE TABLE branch_supplier(
    branch_id INT,
    supplier_name VARCHAR(40),
    supply_type VARCHAR(40),
    PRIMARY KEY(branch_id, supplier_name),
    FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON  DELETE CASCADE
);





INSERT INTO employee VALUES(100,'David', 'Wallace', '1967-11-17', 'M', 250000, NULL,NULL);
INSERT INTO employee VALUES(102,'Michael', 'Scott', '1964-03-15', 'M', 75000, 100,NULL);
INSERT INTO employee VALUES(106,'Josh', 'Porter', '1969-09-05', 'M', 78000, 100,NULL);

INSERT INTO branch VALUES(1,'Corporate', 100, '2006-02-09');
INSERT INTO branch VALUES(2,'Scranton', 102, '1992-04-06');
INSERT INTO branch VALUES(3,'Stamford', 106, '1998-02-13');

UPDATE employee
SET branch_id = 1
WHERE emp_id = 100;

UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;

UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;

INSERT INTO employee VALUES(101,'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);
INSERT INTO employee VALUES(103,'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104,'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105,'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);
INSERT INTO employee VALUES(107,'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108,'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);

INSERT INTO branch_supplier VALUES(2,'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2,'Uni-Ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3,'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2,'J.T. Forms & Labels', 'Custum Forms');
INSERT INTO branch_supplier VALUES(3,'Uni-Ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3,'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3,'Stamford Labels', 'Custom Forms');

INSERT INTO client VALUES(400,'Dunmore Highschool', 2);
INSERT INTO client VALUES(401,'Lackawana Country', 2);
INSERT INTO client VALUES(402,'FedEx', 3);
INSERT INTO client VALUES(403,'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404,'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406,'FedEx', 2);

INSERT INTO works_with VALUES(105,400, 55000);
INSERT INTO works_with VALUES(102,401, 267000);
INSERT INTO works_with VALUES(108,402, 22500);
INSERT INTO works_with VALUES(107,403, 5000);
INSERT INTO works_with VALUES(108,403, 12000);
INSERT INTO works_with VALUES(105,404, 33000);
INSERT INTO works_with VALUES(107,405, 26000);
INSERT INTO works_with VALUES(102,406, 13000);
INSERT INTO works_with VALUES(101,400, 30000);

SELECT * FROM employee;
SELECT * FROM branch;
SELECT * FROM client;
SELECT * FROM branch_supplier;
SELECT * FROM works_with;

--Now let find all employees
SELECT first_name, last_name, salary FROM employee ORDER BY salary DESC;

--FIND OUT ALL THE DIFFERENT GENDERS, displays possible genders
SELECT DISTINCT sex FROM employee;

--this displays number of elements of the column available in table
SELECT COUNT(super_id) FROM employee
WHERE sex = 'F' AND birth_day > '1964-01-01';

--display Average
SELECT AVG(salary) FROM employee;

--display SUM
SELECT SUM(salary) FROM employee;

--Find out hwo many Males and how many females there are in Firm
SELECT COUNT(sex), sex FROM employee
GROUP BY sex;

--the same applies in other tables(aggregation)
SELECT SUM(total_sales), client_id FROM works_with
GROUP BY client_id;









--------------------------UNION AND JOIN------------------------------------------
-- % = any # character, _ = one character
--find any clients who are in LLC
SELECT * FROM client
WHERE client_name LIKE '% LLC%'; -- displays nay ROW where client_name has LLC included

SELECT * FROM branch_supplier
WHERE supplier_name LIKE '% Label%';

SELECT * FROM employee
WHERE birth_day LIKE '____-10%'; --means all first 4 chars of birth_day are ignored and output contains -09



----------------------------UNION-----------------------------
--used to combine the result of multiple select statements
--elemeents must be of same data types

--find a list of employee and  Branch Names
SELECT first_name FROM employee UNION
SELECT branch_name FROM branch;

--find a list of all clients and branch supplier names
SELECT client_name AS clients_and_suppliers FROM client UNION
SELECT supplier_name FROM branch_supplier;



-------------------------JOINS----------------------------------
--it is used to join datas from different tables
INSERT INTO branch VALUES(4, 'Buffalo', NULL, NULL);

--FIND all branches and the name of their managers
SELECT employee.emp_id, employee.first_name, employee.last_name, branch.branch_name
FROM employee
JOIN branch   --simple inner join
ON employee.emp_id = branch.mgr_id;

SELECT employee.emp_id, employee.first_name, employee.last_name, branch.branch_name
FROM employee
LEFT JOIN branch --includes all of the rows from employee(Left Table)
ON employee.emp_id = branch.mgr_id;

SELECT employee.emp_id, employee.first_name, employee.last_name, branch.branch_name
FROM employee
RIGHT JOIN branch   --includes all of the rows from branch(right table)
ON employee.emp_id = branch.mgr_id;




-------------------------NESTED QUERIES---------------------------------
-------------Nested Queries----------------------------
SELECT * FROM employee;
SELECT * FROM works_with;

--find names of all employees who have sold over 30000 to a single cllent
SELECT works_with.total_sales, works_with.emp_id, employee.first_name, employee.last_name
FROM employee
JOIN works_with
ON total_sales > 30000;

--the nested query
SELECT employee.first_name, employee.last_name
FROM employee
WHERE employee.emp_id IN(
    SELECT works_with.emp_id
    FROM works_with
    WHERE works_with.total_sales > 30000
);

--Find all cllients who are handled by the branch that michal scott manages
SELECT client_name FROM client
WHERE client.branch_id IN(
    SELECT branch_id FROM branch
    WHERE branch.mgr_id IN(
        SELECT emp_id FROM employee
        WHERE emp_id = 102
    )
);


-- ON DELETE SET NULL means element will be set to NULL  if reference is deleted
-- ON DELETE CASCADE meand element will be remove if reference is deleted

DELETE FROM employee
WHERE emp_id = 102



------------------TRIGGERS AND IF ELSE STATEMENTS----------------------------
--  a trigger is a set a code that is wriiten to perform  a certain action when an event happens


CREATE TABLE trigger_test(
    message VARCHAR(100)
);

DELIMITER $$
CREATE 
    TRIGGER my_trigger1 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES('added new employee');
    END$$
DELIMITER ;

-- TESTING THE TRIGGER
INSERT INTO employee VALUES(109, 'Oscar', 'Martinez', '1968-02-19', 'M', 69000, 106, 3);
INSERT INTO employee VALUES(110, 'Leo', 'Martinez', '1968-05-19', 'M',89000, 105, 2);
INSERT INTO employee VALUES(112, 'Sara', 'Johnson', '1970-05-01', 'F',100000, 104, 1);

SELECT * FROM trigger_test;




-- anotehr trigger
DELIMITER $$
CREATE 
    TRIGGER my_trigger2 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES(NEW.first_name);
    END$$
DELIMITER ;

--another TRIGGER
DELIMITER $$
CREATE 
    TRIGGER my_trigger3 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        IF NEW.sex = 'M' THEN
            INSERT INTO trigger_test VALUES('added Male employee');
        ELSEIF NEW.sex = 'F' THEN
            INSERT INTO trigger_test VALUES('added Female employee');
        ELSE
            INSERT INTO trigger_test VALUES('added other employee');
        END IF;
    END$$
DELIMITER ;


-- you can also create other TRIGGERS
--TRIGGER my_trigger3 BEFORE DELETE
--TRIGGER my_trigger3 BEFORE UPDATE
--TRIGGER my_trigger3 BEFORE DROP
--TRIGGER my_trigger3 AFTER INSERT
--TRIGGER my_trigger3 AFTER DELETE
--TRIGGER my_trigger3 AFTER UPDATE
-- and even more


--how to delete a Trigger
DROP TRIGGER my_trigger2;
